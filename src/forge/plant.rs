use std::fs;
use std::fs::File;
use std::io::prelude::*;
use std::path::Path;
use crate::forge::seed::*;

/// The base of a Wingman Project.
pub struct Plant {
    pot: String,
    /// Holds the JSON seed file generated by *Seed.make_json()*.
    seed: String,
}

impl Plant {
    pub fn new(path: String) -> Self {
        Plant {
            pot: path,
            seed: Seed::make_json(),
        }
    }

    pub fn plant(&self) -> std::io::Result<String> {
        let path = Path::new(&self.pot);
        fs::create_dir_all(path)?;

        let mut result = String::from("");
        if let Ok(x) = fs::canonicalize(path) {
            result = x.to_string_lossy().to_string();
        }
        self.create_config()?;

        Ok(result)
    }

    fn create_config(&self) -> std::io::Result<()> {

        let mut config = File::create(Path::new(&self.pot).join("seed.json"))?;
        config.write_all(&self.seed.as_bytes())?;
        Ok(())
    }
}

// Creates standard Plant file

// pub mod make {
//     use crate::build::markdown;
//     use crate::new;
//     use chrono::prelude::*;
//     use chrono::Utc;
//     use std::fs;
//     use std::fs::File;

//     pub fn blog() {
//         match make_dir() {
//             Ok(_) => println!("Build sucessful"),
//             Err(e) => eprintln!("{}", e),
//         }
//     }

//     fn make_dir() -> std::io::Result<()> {
//         fs::create_dir_all("./bin/posts/")?;
//         //READS THE POSTS DIR
//         let posts_paths = fs::read_dir("./bin/posts/")?;
//         if posts_paths.count() == 0 {
//             let markdown = File::create("./bin/posts/hello-world.md")?;
//             new::create_example_markdown(markdown)?;
//         } else {
//             println!("Existing markdown detected");
//             //Gets html from each post
//             match markdown::gather() {
//                 Ok(_) => println!("{}", "Gather worked"),
//                 Err(e) => eprintln!("{}", e),
//             }
//         }

//         Ok(())
//     }

//     pub fn post() -> std::io::Result<()> {
//         let path = get_post_date(Utc::now());
//         File::create(path)?;
//         Ok(())
//     }
//     fn get_post_date(now: chrono::DateTime<Utc>) -> String {
//         let mut path = String::from("./bin/posts/");
//         path.push_str(&now.year().to_string());
//         path.push_str("-");
//         path.push_str(&now.month().to_string());
//         path.push_str("-");
//         path.push_str(&now.day().to_string());
//         path.push_str("-");
//         path.push_str(&now.hour().to_string());
//         path.push_str("-");
//         path.push_str(&now.minute().to_string());
//         path.push_str("-");
//         path.push_str(&now.second().to_string());
//         path.push_str(".md");

//         return path;
//     }
// }

// pub fn create_index_html(mut file: File) -> std::io::Result<()> {
//     let index_raw =
// r#"<!DOCTYPE html>
// <html lang="en">
// <head>
//     <meta charset="UTF-8">
//     <meta http-equiv="X-UA-Compatible" content="IE=edge">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Made with Wingman</title>
// </head>
// <body>
// </body>
// </html>"#;
//     file.write_all(index_raw.as_bytes())?;
//     Ok(())
// }

// fn create_example_markdown(mut file: File) -> std::io::Result<()> {
//     let mk_raw = r##"
// # Hello, World!
// Welcome to Wingman! Generate your blog by writing markdown in as many files as you like here in the ./posts folder. 
// The order your posts appear on the page depends on how you organize your directory. I suggest a YYYY--MM-DD-SLUG methodology for reverse chronological.
// There will be further customization and parsing in the future.
// "##;

//     file.write_all(mk_raw.as_bytes())?;

//     Ok(())
// }
